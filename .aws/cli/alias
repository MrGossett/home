[toplevel]

whoami = sts get-caller-identity

# List or set your region
region = !f() { [[ $# -eq 1 ]] && aws configure set region "$1" || aws configure get region; }; f

find-access-key = !f() {
    clear_to_eol=$(tput el)
    for i in $(aws iam list-users --query "Users[].UserName" --output text); do
      printf "\r%sSearching...$i" "${clear_to_eol}"
      result=$(aws iam list-access-keys --output text --user-name "${i}" --query "AccessKeyMetadata[?AccessKeyId=='${1}'].UserName";)
      if [ -n "${result}" ]; then
         printf "\r%s%s is owned by %s.\n" "${lear_to_eol}" "$1" "${result}"
         break
      fi
    done
    if [ -z "${result}" ]; then
      printf "\r%sKey not found." "${clear_to_eol}"
    fi
  }; f

myip =
  !f() {
    dig +short myip.opendns.com @resolver1.opendns.com
  }; f

config-orgs =
  !f() {
    id=$(aws organizations list-accounts --query "Accounts[?contains(Email, '$1')].Id" --output text --profile mlv)
    aws configure set "profile.$1.region" $(aws configure get profile.mlv.region)
    aws configure set "profile.$1.source_profile" mlv
    aws configure set "profile.$1.role_arn" "arn:aws:iam::$id:role/jit_admin"
  }; f

accounts =
  !f() {
    aws organizations list-accounts --profile mlv --query 'Accounts[*].[Id, Email, Name]' --output table
  }; f

find-account =
  !f() {
      aws organizations list-accounts --query "Accounts[?contains(Email, '$1')]" --profile mlv
  }; f

profiles =
  !f() {
    cat ~/.aws/config | grep '\[' | tr -d '[]' | cut -f 2 -d ' '
  }; f

